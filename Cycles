Cycles in roblox are considered almost the most important components in roblox
Using them you can do checks, make it easier to work on scripts, and so on
But there are many types of cycles and I will tell you about the most important ones

1. for

With a "for" loop you can repeat the script as many times as you like
Example script:

for i = a, b do
 print("This script repeating b times")
end

a – What date does it start from
b – How many times to repeat the cycle

You can aslo add in cycle delay:

for i = a, b do
  wait(0.2)
 print("This script repeating b times")
end

But you can also make a certain variable equal to i
Here are examples of scripts:

for i = 1, 10 do
print(i)
end

local a = 0
for i = 1, 5 do
 a = a + i
 print(a)
end

But using a for loop you can do more than just that
For example, find all objects in Workspace
Example script:

for i,v in pairs(game.Workspace:GetChildren()) do
        if v:IsA("Part") then
    v.Color = Color3.fromRGB(0, 255, 0)
        end
end

GetChildren is mean what searches only for those that were launched at the very moment of launch
GetDescendants is mean what searches absolutely all of them, even those that haven't launched yet at this moment

2. while 

With "while" you can run the script endlessly and non-stop
Example script:

y = 1
while wait() do
y = y + 1
 warn(y)
end

You can also put not only wait but also other options:

while true do
 wait() -- This is absolutely necessary because if you don't set it, the game will freeze
print("This script will never stop")
 end
 
But even this is not all because you can do the following things:
 
 gh = true
df = 1
while wait() and gh == true do
df = df + 1
 warn("The cycle will turn off if gh is false")
       if df == 30 then
gh = false
       end
end

But you can configure the loop to be faster than wait()
wait() means wait(0) but wait() has a limit of 20 repetitions per second
In wait, you don’t have to write 0 at the beginning, so you can do it like this: wait(.2), wait(.05)
But here are waits that are faster than wait():

1. game:GetService("RunService").RenderStepped:Wait() -- faster than wait()
2. task.wait() -- faster than RenderStepped:Wait() and does not cause lags
3. game:GetService("RunService").Stepped:Wait() -- a little faster than task.wait()
4. game:GetService("RunService").Heartbeat:Wait() -- Fastest of all cycles, but it depends of FPS(if your FPS 60 then Heartbeat speed will 60 times in second and so on)

3. if

This is a very useful and important cycle in roblox
With it you can check for the presence of something and so on
But for this you need to use other options:

== – if it is equal (use instead of =)
~= – not equal
<= – If less than or equal
>= – If greater than or equal

You can also use these functions(they can be used not only in if statements):

and – if (some value) and (some value) then
or – if (some value) or (some value) then
not – if not (some value) and not (some value) then -- it's like ~= but more convenient

But that's not all
There are also "else" and "elseif"
"else" is used if the value is opposite to the value in the statement
Example script:

local keycode = 123
if keycode == 123 then
 print("Correct")
  else
 print("Incorrect")
end

"elseif" is a confluence of two statements else and if
It is needed to shorten scripts or to make them work more correctly or clarify requirements
Example script:

local keycode = 3
if keycode == 1 then
 print("correct key code")
  elseif keycode == 2 then
   print("2 is incorrect key code")
  elseif keycode == 3 then
 print("3 is incorrect key code")
end

4. repeat

"repeat" is almost the same as while, but it cannot be switched and until is used instead of end
Example script:

repeat 
task.wait() -- a delay is also a must
 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0.1, 0)
until game.Players.LocalPlayer.Character.Humanoid.Health <= 0

However, repeat is nothing unusual, it’s just convenient to usе
